import os
import sys
import json
import logging
import asyncio
import time
from aiohttp import web
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Update

# --- –ü—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ ---
sys.path.append("/app")
sys.path.append("/app/bot")
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from loader import bot, dp
from app.handlers.textoid_handlers import router as textoid_router
from logging_config import setup_logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
setup_logging()
load_dotenv()
dp.include_router(textoid_router)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
IS_LOCAL = os.getenv("LOCAL_RUN", "false").lower() == "true"
WEBHOOK_HOST = os.getenv("WEBHOOK_URL", "https://textoid-panarini.amvera.io").strip()
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("WEBHOOK_PORT", 80))

# --- –•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ ---
async def handle_root(request):
    logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /")
    return web.Response(text="‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", content_type="text/plain")

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è Webhook ---
async def handle_update(request):
    start_time = time.time()
    try:
        data = await request.json()
        update = Update(**data)
        await dp.feed_update(bot=bot, update=update)
        logging.info(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω—è–ª–∞ {time.time() - start_time:.4f} —Å–µ–∫")
        return web.Response()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook: {e}", exc_info=True)
        return web.Response(status=500)

# --- Startup: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook ---
async def on_startup():
    if IS_LOCAL:
        logging.info("üõë –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫. Webhook –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.")
        await bot.delete_webhook(drop_pending_updates=True)
    else:
        logging.info(f"üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook: {WEBHOOK_URL}")
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            await bot.set_webhook(WEBHOOK_URL)
            logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook: {e}")
            sys.exit(1)

# --- Shutdown: –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ ---
async def on_shutdown(_):
    logging.info("üö® –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞...")
    try:
        await bot.session.close()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
    logging.info("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def start_server():
    await on_startup()

    if IS_LOCAL:
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Polling...")
        await dp.start_polling(bot)
        return

    app = web.Application()
    app.add_routes([
        web.get("/", handle_root),
        web.post(WEBHOOK_PATH, handle_update)
    ])
    app.on_shutdown.append(on_shutdown)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, WEBAPP_HOST, WEBAPP_PORT)
    await site.start()
    logging.info(f"‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {WEBAPP_HOST}:{WEBAPP_PORT}")

    # –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
    await asyncio.Event().wait()

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    try:
        asyncio.run(start_server())
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
