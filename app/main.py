import os
import sys
import logging
import asyncio
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# üìå –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π (–¥–ª—è Amvera)
sys.path.append("/app")
sys.path.append("/app/app")
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from logging_config import setup_logging
from loader import bot, dp
from handlers.textoid_handlers import router as textoid_router  # –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏–∑ –∫–æ—Ä–Ω—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logging.info("üöÄ –°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
dp.include_router(textoid_router)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_MODE = os.getenv("BOT_MODE", "polling")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/textoid")
WEBAPP_HOST = os.getenv("WEBAPP_HOST", "0.0.0.0")
WEBAPP_PORT = int(os.getenv("WEBAPP_PORT", 80))


async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    if BOT_MODE == "webhook":
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_webhook(WEBHOOK_URL)
        logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


async def on_shutdown(_):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π"""
    logging.info("üö® –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–∫—Ä—ã–≤–∞—é —Å–µ—Å—Å–∏—é...")
    await bot.session.close()
    logging.info("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")


async def start_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ Polling"""
    if BOT_MODE == "polling":
        logging.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Polling")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
        return

    # Webhook —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ AppRunner
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    app.on_startup.append(lambda app: on_startup())
    app.on_shutdown.append(on_shutdown)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, WEBAPP_HOST, WEBAPP_PORT)
    await site.start()
    logging.info(f"Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {WEBAPP_HOST}:{WEBAPP_PORT}")

    # –î–µ—Ä–∂–∏–º loop –∂–∏–≤—ã–º
    await asyncio.Event().wait()


if __name__ == "__main__":
    try:
        asyncio.run(start_server())
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logging.error(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
