import os
import sys
import logging
import asyncio
from aiohttp import web
from aiogram.types import Update

# --- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path ---
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

# --- –ò–º–ø–æ—Ä—Ç—ã ---
from loader import bot, dp
from app.handlers.textoid_handlers import router as textoid_router
from logging_config import setup_logging

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
setup_logging()
logging.info("üöÄ –°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

# --- –†–æ—É—Ç–µ—Ä—ã ---
dp.include_router(textoid_router)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_MODE = os.getenv("BOT_MODE", "polling")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/textoid")
WEBAPP_HOST = os.getenv("WEBAPP_HOST", "0.0.0.0")
WEBAPP_PORT = int(os.getenv("WEBAPP_PORT", 80))


# --- –•–µ–Ω–¥–ª–µ—Ä—ã webhook ---
async def handle_update(request):
    try:
        data = await request.json()
        update = Update(**data)
        # ‚ö°Ô∏è feed_update –≤ Amvera-—Å—Ä–µ–¥–µ
        await dp.feed_update(bot=bot, update=update)
        return web.Response()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update: {e}", exc_info=True)
        return web.Response(status=500)


async def handle_root(request):
    return web.Response(text="‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", content_type="text/plain")


# --- –ó–∞–ø—É—Å–∫ polling ---
async def start_polling():
    logging.info("–ó–∞–ø—É—Å–∫ polling")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


# --- –ó–∞–ø—É—Å–∫ webhook ---
async def start_webhook():
    logging.info("–ó–∞–ø—É—Å–∫ webhook")
    app = web.Application()
    app.add_routes([
        web.post(WEBHOOK_PATH, handle_update),
        web.get("/", handle_root)
    ])

    async def on_startup(app):
        if WEBHOOK_URL:
            await bot.delete_webhook(drop_pending_updates=True)
            await bot.set_webhook(WEBHOOK_URL)
            logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    app.on_startup.append(on_startup)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host=WEBAPP_HOST, port=WEBAPP_PORT)
    await site.start()
    logging.info(f"Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {WEBAPP_HOST}:{WEBAPP_PORT}")

    # ‚ö°Ô∏è –ï—Å–ª–∏ Amvera —É–∂–µ –¥–µ—Ä–∂–∏—Ç loop, –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.Event().wait()
    try:
        await asyncio.Event().wait()
    except asyncio.CancelledError:
        logging.info("üõë Webhook –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    try:
        # üîπ –î–ª—è Amvera –ª—É—á—à–µ –Ω–∞–ø—Ä—è–º—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å loop
        if BOT_MODE.lower() == "webhook":
            loop = asyncio.get_event_loop()
            loop.create_task(start_webhook())
            loop.run_forever()
        else:
            asyncio.run(start_polling())
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
